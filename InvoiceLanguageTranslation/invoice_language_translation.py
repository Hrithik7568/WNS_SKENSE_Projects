# -*- coding: utf-8 -*-
"""Invoice Language Translation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ka9wyu2yseTlaktTTm-S-xtDOaUrrRvX
"""

from google.colab import files
import os

# Create directories
input_folder = 'invoices'
output_folder = 'translated_invoices'

if not os.path.exists(input_folder):
    os.makedirs(input_folder)

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Upload files
uploaded = files.upload()
for file_name in uploaded.keys():
    file_path = os.path.join(input_folder, file_name)
    with open(file_path, 'wb') as f:
        f.write(uploaded[file_name])

!apt-get install -y poppler-utils

# Install the necessary packages
!apt-get update
!apt-get install -y tesseract-ocr
!apt-get install -y libtesseract-dev
!pip install pytesseract
!pip install pdf2image
!pip install langdetect
!pip install googletrans==4.0.0-rc1
!pip install pillow

import pytesseract
from pdf2image import convert_from_path
from langdetect import detect
from googletrans import Translator
from PIL import Image
import os

# Setup paths for OCR
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'  # Update with the correct path to Tesseract OCR on your machine

# Initialize the translator
translator = Translator()

def extract_text_from_image(image_path):
    image = Image.open(image_path)
    return pytesseract.image_to_string(image)

def extract_text_from_pdf(pdf_path):
    images = convert_from_path(pdf_path)
    text = ""
    for image in images:
        text += pytesseract.image_to_string(image)
    return text

def detect_and_translate(text, target_language="en"):
    try:
        detected_language = detect(text)
        if detected_language != target_language:
            translated_text = translator.translate(text, src=detected_language, dest=target_language).text
            return translated_text
        else:
            return text
    except Exception as e:
        print(f"Error detecting or translating text: {e}")
        return text

def process_invoice(file_path):
    if file_path.endswith(".pdf"):
        text = extract_text_from_pdf(file_path)
    elif file_path.endswith((".png", ".jpg", ".jpeg")):
        text = extract_text_from_image(file_path)
    else:
        raise ValueError("Unsupported file format")

    translated_text = detect_and_translate(text)
    return translated_text

# Example usage
input_folder = 'invoices'  # Path to your invoices
output_folder = 'translated_invoices'  # Path to save translated invoices

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

for file_name in os.listdir(input_folder):
    file_path = os.path.join(input_folder, file_name)
    try:
        translated_text = process_invoice(file_path)
        output_file_path = os.path.join(output_folder, file_name.replace('.pdf', '.txt').replace('.jpg', '.txt').replace('.png', '.txt'))
        with open(output_file_path, 'w') as f:
            f.write(translated_text)
        print(f"Processed and translated {file_name}")
    except Exception as e:
        print(f"Error processing {file_name}: {e}")